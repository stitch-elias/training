## 凹点检测
def detection(img_detect):
    # 轮廓提取
    _, contours, hierarchy = cv.findContours(img_detect, cv.RETR_TREE, cv.CHAIN_APPROX_SIMPLE)
    # 计算凸包数量
    for i in range(len(contours)):
        cnt = contours[i]
        min_dist = 0
        # 返回该物体得凸包个数
        hull = cv.convexHull(cnt, returnPoints=False)  # 需要point2d
        if len(hull) > 10:
            # 缺陷计算
            defects = cv.convexityDefects(cnt, hull)
            if len(defects) >= 2:
                # 按第四个之倒叙排序
                defects_point = defects[np.lexsort(-defects.T)]  # 多列数据排序，优先照顾后面的列
                o_s, oe, of, od = defects_point[0, 0, 0]
                ostart = tuple(cnt[of][0])
                ts, te, tf, td = defects_point[0, 1, 0]
                tstart = tuple(cnt[tf][0])
                if (od / 256) > 10:
                    cv.line(img_detect, tuple(ostart), tuple(tstart), [0, 0, 255], 5)
    return img_detect
    
for i in range(defects.shape[0]):
    s,e,f,d = defects[i,0]
    start = tuple(cnt[s][0])
    end = tuple(cnt[e][0])
    far = tuple(cnt[f][0])
    cv2.line(img,start,end,[0,255,0],2)
    cv2.circle(img,far,5,[0,0,255],-1)

import cv2
import numpy as np
def f(x):
    delt = getProperty('阈值','float',0)
    dist_img = cv2.distanceTransform(x[0].copy(),cv2.DIST_L1,cv2.DIST_MASK_3)
    dist_output = cv2.normalize(dist_img,0,1.0,cv2.NORM_MINMAX)
    ret,th2 = cv2.threshold(dist_output*80,delt,255,cv2.THRESH_BINARY)
    setResult('img','HeilsImage',np.asarray(th2,dtype=np.uint8))
    pass


img_thinning = cv.ximgproc.thinning(img_bin, thinningType=cv.ximgproc.THINNING_ZHANGSUEN)


dist_transform = cv2.distanceTransform(opening, cv2.DIST_L2, 5)  # DIST_L1 DIST_C只能 对应掩膜为3    DIST_L2 可以为3或者5
ret, sure_fg = cv2.threshold(dist_transform, 0.1 * dist_transform.max(), 255, 0)


sure_fg = np.uint8(sure_fg)
unknow = cv2.subtract(sure_bg, sure_fg)

ret, markers = cv2.connectedComponents(sure_fg,connectivity=8) #对连通区域进行标号  序号为 0 - N-1 
markers = markers + 1           #OpenCV 分水岭算法对物体做的标注必须都 大于1 ，背景为标号 为0  因此对所有markers 加1  变成了  1  -  N

markers[unknow==255] = 0   
markers = cv2.watershed(img, markers)  #分水岭算法后，所有轮廓的像素点被标注为  -1 

img[markers == -1] = [0, 0, 255]   # 标注为-1 的像素点标 红
